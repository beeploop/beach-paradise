// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cottage {
  cottageId   Int              @id @default(autoincrement())
  name        String           @unique
  price       Int
  description String?
  Booking     CottageBooking[]
}

model CottageBooking {
  bookingId   Int           @id @default(autoincrement())
  cottage     Cottage       @relation(fields: [cottageName], references: [name])
  cottageName String
  user        User          @relation(fields: [userId], references: [userId])
  userId      Int
  checkin     DateTime      @db.Date
  checkout    DateTime      @db.Date
  price       Int
  createdAt   DateTime      @default(now())
  status      bookingStatus @default(pending)
}

model Room {
  roomNumber  Int           @id @default(autoincrement())
  type        roomType      @default(deluxe)
  bed         Int
  status      roomStatus    @default(operational)
  price       Int
  description String?
  Booking     RoomBooking[]
}

model RoomBooking {
  bookingId  Int           @id @default(autoincrement())
  room       Room          @relation(fields: [roomNumber], references: [roomNumber])
  user       User          @relation(fields: [userId], references: [userId])
  roomNumber Int
  userId     Int
  checkin    DateTime      @db.Date
  checkout   DateTime      @db.Date
  adults     Int           @default(1)
  kids       Int?
  price      Int
  createdAt  DateTime      @default(now())
  status     bookingStatus @default(pending)
}

model Admin {
  adminID  Int    @id @default(autoincrement())
  email    String @unique
  password String @unique
}

model User {
  userId         Int              @id @default(autoincrement())
  firstname      String
  lastname       String
  profile        Profile          @relation(fields: [profileId], references: [profileId])
  profileId      Int              @unique
  Booking        RoomBooking[]
  CottageBooking CottageBooking[]
  Token          Token[]
}

model Profile {
  profileId Int    @id @default(autoincrement())
  email     String @unique
  phone     String
  street    String
  city      String
  state     String
  postal    Int
  User      User?
}

model Token {
  tokenId   String      @id @default(uuid())
  booker    User        @relation(fields: [bookerId], references: [userId])
  bookerId  Int
  bookingId Int         @unique
  type      tokenType
  status    tokenStatus @default(pending)
  createdAt DateTime    @default(now())
}

enum roomType {
  deluxe
  suite
}

enum roomStatus {
  operational
  unoperational
}

enum tokenType {
  room
  cottage
}

enum tokenStatus {
  pending
  verified
  expired
}

enum bookingStatus {
  pending
  verified
  canceled
}
